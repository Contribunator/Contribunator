import { Octokit } from "@octokit/rest";
import { createAppAuth } from "@octokit/auth-app";
import commitPlugin from "octokit-commit-multiple-files";
import config from "@/config";

const OctokitPlugin = Octokit.plugin(commitPlugin);

export const octokit = new OctokitPlugin({
  authStrategy: createAppAuth,
  auth: {
    clientId: process.env.GITHUB_CLIENT_ID as string,
    clientSecret: process.env.GITHUB_CLIENT_SECRET as string,
    appId: parseInt(process.env.GITHUB_APP_ID as string),
    installationId: parseInt(process.env.GITHUB_APP_INSTALLATION_ID as string),
    privateKey: process.env.GITHUB_APP_PK as string,
  },
  // auth: token.accessToken // TODO if we want to impersonate user?
});

export async function getRepo(repo: string) {
  // TODO caching etc, and make this generalized for easy querying.
  try {
    const { data } = await octokit.repos.get({ repo, owner: config.owner });
    return data;
  } catch (e) {
    return null;
  }
}

export async function createPullRequest({
  repo,
  description,
  files,
  type,
}: {
  repo: string;
  type: string;
  description: string;
  files: {
    [key: string]: string;
  };
}) {
  // create a nem
  const branch = `c11r/${type}/${new Date().getTime()}`
  const message = `Create ${type}: ${description}`;
  // todo get the branch
  // const head = branch
  // TODO validaiton based on config file...
  
  const { commits } = await octokit.rest.repos.createOrUpdateFiles({
    repo,
    owner: config.owner,
    base: config.base,
    branch,
    createBranch: true,
    changes: [
      {
        message,
        files,
      },
    ],
  });

  // TODO create a PR

  const {
    data: { html_url: url },
  } = await octokit.pulls.create({
    repo,
    owner: config.owner,
    base: config.base,
    head: branch,
    title: message,
    body: "This was generated by a bot",
  });

  console.dir(commits[0]);

  // todo error handling
  return url;
}
