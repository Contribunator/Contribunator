import { Octokit } from "@octokit/rest";
import { createAppAuth } from "@octokit/auth-app";
import commitPlugin from "octokit-commit-multiple-files";
import config from "@/config";

const OctokitPlugin = Octokit.plugin(commitPlugin);

export const octokit = new OctokitPlugin({
  authStrategy: createAppAuth,
  auth: {
    clientId: process.env.GITHUB_CLIENT_ID as string,
    clientSecret: process.env.GITHUB_CLIENT_SECRET as string,
    appId: parseInt(process.env.GITHUB_APP_ID as string),
    installationId: parseInt(process.env.GITHUB_APP_INSTALLATION_ID as string),
    privateKey: process.env.GITHUB_APP_PK as string,
  },
  // auth: token.accessToken // TODO if we want to impersonate user?
});

type Changes = {
  message: string;
  files: {
    [key: string]: string;
  }[];
};

export async function commitFiles({
  repo,
  changes,
  type,
}: {
  repo: string;
  changes: Changes;
  type: string;
}) {
  // create a nem
  const commits = await octokit.rest.repos.createOrUpdateFiles({
    owner: config.owner,
    repo,
    branch: `c11r/${type}/${new Date().getTime()}`,
    createBranch: true,
    changes,
  });

  // TODO create a PR
  /*
  const {
    data: { html_url: url },
  } = await octokit.pulls.create({
    ...repoConf,
    head,
    base,
    title: "Update YAML",
    body: "This was generated by a bot",
  });

  */

  // todo error handling
  return commits;
}
